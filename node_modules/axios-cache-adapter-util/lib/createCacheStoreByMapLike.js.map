{"version":3,"file":"createCacheStoreByMapLike.js","sourceRoot":"","sources":["createCacheStoreByMapLike.ts"],"names":[],"mappings":";;;;;AAGA,MAAa,mBAAmB;IAI/B,YAAY,GAAM;QAFlB,2CAAQ;QAIP,oCAAA,IAAI,4BAAQ,GAAG,MAAA,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW;QAExB,OAAO,oCAAA,IAAI,gCAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,KAA6B;QAEvD,MAAM,oCAAA,IAAI,gCAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;QAC/B,OAAO,oCAAA,IAAI,gCAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,GAAW;QAE3B,MAAM,oCAAA,IAAI,gCAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAC3B,OAAM;IACP,CAAC;IAED,KAAK,CAAC,KAAK;QAEV,MAAM,oCAAA,IAAI,gCAAK,CAAC,KAAK,EAAE,CAAA;QACvB,OAAM;IACP,CAAC;IAED,KAAK,CAAC,MAAM;QAEX,OAAO,oCAAA,IAAI,gCAAK,CAAC,IAAI,CAAA;IACtB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAmE;QAEhF,MAAM,OAAO,GAAG,oCAAA,IAAI,gCAAK,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,OAAO,EACtC;YACC,MAAM,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;SACpB;QAED,OAAO,OAAO,CAAA;IACf,CAAC;IAED,IAAI,KAAK;QAER,OAAO,MAAM,CAAC,WAAW,CAAC,oCAAA,IAAI,gCAAK,CAAC,OAAO,EAAE,CAAC,CAAA;IAC/C,CAAC;CAED;AAtDD,kDAsDC;;AAED,SAAgB,yBAAyB,CAAgG,GAAM;IAE9I,OAAO,IAAI,mBAAmB,CAAC,GAAG,CAAC,CAAA;AACpC,CAAC;AAHD,8DAGC","sourcesContent":["import { ITSResolvable } from 'ts-type';\nimport { IBaseCacheStore, ICacheStoreJson, ICacheStoreJsonItem, ICacheStoreJsonRow } from './index';\n\nexport class CacheStoreByMapLike<R extends Map<any, ICacheStoreJsonItem<T>>, T extends ICacheStoreJsonRow = ICacheStoreJsonRow>\n{\n\t#map: R;\n\n\tconstructor(map: R)\n\t{\n\t\tthis.#map = map;\n\t}\n\n\tasync getItem(key: string)\n\t{\n\t\treturn this.#map.get(key)\n\t}\n\n\tasync setItem(key: string, value: ICacheStoreJsonItem<T>)\n\t{\n\t\tawait this.#map.set(key, value)\n\t\treturn this.#map.get(key)\n\t}\n\n\tasync removeItem(key: string)\n\t{\n\t\tawait this.#map.delete(key)\n\t\treturn\n\t}\n\n\tasync clear()\n\t{\n\t\tawait this.#map.clear()\n\t\treturn\n\t}\n\n\tasync length()\n\t{\n\t\treturn this.#map.size\n\t}\n\n\tasync iterate(fn: (value: object | string | T, key: string) => ITSResolvable<any>)\n\t{\n\t\tconst entries = this.#map.entries();\n\n\t\tfor await (let [key, value] of entries)\n\t\t{\n\t\t\tawait fn(value, key)\n\t\t}\n\n\t\treturn entries\n\t}\n\n\tget store(): ICacheStoreJson<T>\n\t{\n\t\treturn Object.fromEntries(this.#map.entries())\n\t}\n\n}\n\nexport function createCacheStoreByMapLike<R extends Map<any, ICacheStoreJsonItem<T>>, T extends ICacheStoreJsonRow = ICacheStoreJsonRow>(map: R)\n{\n\treturn new CacheStoreByMapLike(map)\n}\n"]}