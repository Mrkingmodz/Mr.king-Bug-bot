{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n\tAxiosAdapter,\n\tAxiosError,\n\tAxiosInstance,\n\tAxiosPromise,\n\tAxiosRequestConfig,\n\tAxiosResponse,\n\tAxiosStatic,\n} from 'axios';\nimport { IResponseHeaders } from 'typed-http-headers';\nimport Bluebird from 'bluebird';\nimport { ITSPartialPick, ITSUnpackedPromiseLike } from 'ts-type';\nimport { RetryConfig as IAxiosRetryConfig } from 'retry-axios';\nimport { IPropertyKey } from 'reflect-metadata-util';\nimport { setupCache, IAxiosCacheAdapterOptions, ISetupCache } from 'axios-cache-adapter';\nimport { FollowResponse } from 'follow-redirects';\nimport { ITSOverwrite } from 'ts-type/lib/type/record';\n\nexport type IBluebird<T> = Bluebird<T>\nexport type IHttpheadersValues = string | number | boolean | string[];\n\nexport interface IHttpheaders extends Record<string | keyof IResponseHeaders, IHttpheadersValues>\n{\n\tAccepts?: 'application/json' | string | string[],\n\tReferer?: string,\n\t'Content-Type'?: string,\n\t'Authorization'?: string,\n\t'x-auth-token'?: string,\n\t'Set-Cookie'?: string[],\n}\n\nexport interface IAxiosDefaultsHeaders extends Partial<Record<'common' | 'delete' | 'get' | 'post' | 'put' | 'patch', IHttpheaders>>\n{\n\n}\n\nexport type IUnpackAxiosResponse<T> =\n\tT extends PromiseLike<AxiosResponse<infer U>> ? U :\n\t\tT extends AxiosResponse<infer U> ? U :\n\t\t\tnever\n\t;\nexport type IBluebirdAxiosResponse<T = any> = IBluebird<AxiosResponse<T>>;\nexport type IUnpackedPromiseLikeReturnType<T extends (...args: any) => any> = ITSUnpackedPromiseLike<ReturnType<T>>;\n\nexport interface IAxiosAdapterWarpper\n{\n\t(config: AxiosRequestConfig, returnValue: AxiosResponse<any>): AxiosPromise<any>;\n}\n\nexport interface IAxiosResponseClientRequest extends Record<IPropertyKey, any>\n{\n\tres?: ITSOverwrite<FollowResponse, {\n\t\tresponseUrl?: FollowResponse[\"responseUrl\"],\n\t\tredirects?: FollowResponse[\"redirects\"],\n\t\theaders?: IHttpheaders,\n\t\trawHeaders?: string[],\n\t}>,\n\tpath?: string,\n\tmethod?: string,\n\tfinished?: boolean,\n\n\tfromCache?: boolean,\n}\n\ndeclare module 'axios-cache-adapter'\n{\n\tinterface IAxiosCacheAdapterOptions\n\t{\n\t\texcludeFromCache?: boolean,\n\t}\n}\n\ndeclare module 'axios'\n{\n\n\tinterface AxiosRequestConfigHeaders extends IHttpheaders\n\t{\n\n\t}\n\n\tinterface AxiosInstance\n\t{\n\n\t}\n\n\tinterface AxiosRequestConfig\n\t{\n\t\t/**\n\t\t * configure how the cached requests will be handled, where they will be stored, etc.\n\t\t */\n\t\tcache?: IAxiosCacheAdapterOptions;\n\n\t\t/**\n\t\t * force cache invalidation\n\t\t */\n\t\tclearCacheEntry?: boolean;\n\n\t\theaders?: AxiosRequestConfig[\"headers\"] | IHttpheaders;\n\t\t/**\n\t\t * @see https://www.npmjs.com/package/retry-axios\n\t\t * @deprecated\n\t\t */\n\t\traxConfig?: IAxiosRetryConfig;\n\n\n\t}\n\n\tinterface AxiosResponse<T = any>\n\t{\n\t\theaders: AxiosResponse<T>[\"headers\"] | IHttpheaders;\n\t\trequest?: AxiosResponse<T>[\"request\"] | IAxiosResponseClientRequest;\n\t}\n\n\tinterface AxiosError<T = any>\n\t{\n\t\t//config: AxiosError<T>[\"config\"]\n\t\trequest?: AxiosError<T>[\"request\"] | IAxiosResponseClientRequest;\n\t}\n}\n\nexport interface IAxiosCacheAdapterOptionsConfig extends ITSPartialPick<AxiosRequestConfig, 'cache' | 'clearCacheEntry'>\n{\n\n}\n\nexport { IAxiosCacheAdapterOptions, IAxiosRetryConfig, AxiosAdapter, AxiosPromise }\nexport { AxiosRequestConfig, AxiosResponse, AxiosInstance, AxiosError, AxiosStatic }\n"]}