{"version":3,"file":"cache.js","sourceRoot":"","sources":["cache.ts"],"names":[],"mappings":";;;;AAGA,6DAAyF;AAWhF,2FAXA,gCAAU,OAWA;AAVnB,mCAAsC;AACtC,qEAAgC;AAGhC,sGAA6F;AAC7F,yEAAkC;AAClC,+DAAyF;AAMzF,SAAgB,gBAAgB,CAAiE,WAAc;;;IAE9G,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAE5C,YAAA,WAAW,CAAC,KAAK,EAAC,KAAK,uCAAL,KAAK,GAAK,CAAC,GAAG,EAAE;QACjC,MAAM,GAAG,GAAG,IAAI,oBAAQ,CAAC;YACxB,GAAG,EAAE,GAAG;SACR,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,IAAI,+CAAmB,CAAC,GAAU,CAAC,CAAA;QAEjD,OAAO,KAAK,CAAC;IACd,CAAC,CAAC,EAAE,EAAC;IAEL,MAAM,KAAK,GAAG,IAAA,gCAAU,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG;QACd,GAAI,WAAgC;QAEpC,OAAO,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAiB;KACvD,CAAC;IAEF,aAAa;IACb,OAAO,MAAM,CAAC,KAAK,CAAC;IAEpB,OAAO;QACN,MAAM;QACN,KAAK;KACL,CAAA;AACF,CAAC;AA7BD,4CA6BC;AAED,SAAgB,gBAAgB,CAA4C,MAAS;IAEpF,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,EAC5D;QACC,MAAM,CAAC,KAAK,GAAG,IAAA,qBAAY,EAAC,MAAM,CAAC,KAAK,EAAE;YACzC,OAAO,EAAE;gBACR,MAAM,CAAC,GAAQ;oBAEd,OAAO,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC;gBAC1B,CAAC;aACD;YACD,GAAG,EAAE,sCAAgC;SACrC,CAAC,CAAA;KACF;IAED,OAAO,MAAM,CAAC;AACf,CAAC;AAhBD,4CAgBC;AAED,kBAAe,gBAAgB,CAAA","sourcesContent":["\nimport { AxiosRequestConfig } from './index';\nimport { AxiosAdapter } from 'axios';\nimport { setupCache, IAxiosCacheAdapterOptions, ISetupCache } from 'axios-cache-adapter';\nimport { defaultsDeep } from 'lodash';\nimport Bluebird from 'bluebird';\nimport { ITSPartialPick } from 'ts-type';\nimport { IAxiosCacheAdapterOptionsConfig } from './types';\nimport { CacheStoreByMapLike } from 'axios-cache-adapter-util/lib/createCacheStoreByMapLike';\nimport LRUCache from 'lru-cache2';\nimport { defaultAxiosCacheAdapterKeyFixed } from 'axios-cache-adapter-util/lib/util/key';\n\nexport { IAxiosCacheAdapterOptions, ISetupCache, IAxiosCacheAdapterOptionsConfig }\n\nexport { setupCache }\n\nexport function setupCacheConfig<T extends IAxiosCacheAdapterOptionsConfig | AxiosRequestConfig>(configInput: T)\n{\n\tconfigInput = mixinCacheConfig(configInput);\n\n\tconfigInput.cache.store ??= (() => {\n\t\tconst lru = new LRUCache({\n\t\t\tmax: 500,\n\t\t});\n\n\t\tconst store = new CacheStoreByMapLike(lru as any)\n\n\t\treturn store;\n\t})();\n\n\tconst cache = setupCache(configInput.cache);\n\n\tconst config = {\n\t\t...(configInput as Omit<T, 'cache'>),\n\n\t\tadapter: Bluebird.method(cache.adapter) as AxiosAdapter,\n\t};\n\n\t// @ts-ignore\n\tdelete config.cache;\n\n\treturn {\n\t\tconfig,\n\t\tcache,\n\t}\n}\n\nexport function mixinCacheConfig<T extends IAxiosCacheAdapterOptionsConfig>(config: T)\n{\n\tif (config.cache != null && typeof config.cache === 'object')\n\t{\n\t\tconfig.cache = defaultsDeep(config.cache, {\n\t\t\texclude: {\n\t\t\t\tfilter(res: any)\n\t\t\t\t{\n\t\t\t\t\treturn res.status >= 500;\n\t\t\t\t}\n\t\t\t},\n\t\t\tkey: defaultAxiosCacheAdapterKeyFixed,\n\t\t})\n\t}\n\n\treturn config;\n}\n\nexport default setupCacheConfig\n"]}