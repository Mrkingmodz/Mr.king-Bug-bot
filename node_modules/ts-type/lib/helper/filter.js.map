{"version":3,"file":"filter.js","sourceRoot":"","sources":["filter.ts"],"names":[],"mappings":";AAAA;;GAEG","sourcesContent":["/**\n * Created by user on 2019/6/8.\n */\n\nimport { ITSPropertyKey } from '..';\n\n/**\n * Exclude from T those types that are assignable to U, and replace to R\n */\nexport type ITSExclude2<T, U, R = T> = T extends U ? never : R;\n\n/**\n * Extract from T those types that are assignable to U, and replace to R\n */\nexport type ITSExtract2<T, U, R = T> = T extends U ? R : never;\n\nexport type ITSExtractRecord<M, T, K extends keyof M = keyof M> = {\n\t[P in K]: Extract<M[P], T>;\n};\n\nexport type ITSExtractRecordNoNull<M, T, K extends keyof M = keyof M> = {\n\t[P in K]: NonNullable<M[P]>;\n};\n\nexport type ITSExtractKeyofRecord<M, T> = keyof ITSExtractRecord<M, T>;\n\nexport type ITSExcludeRecord<M, T, K extends keyof M = keyof M> = {\n\t[P in K]: Exclude<M[P], T>;\n};\n\nexport type ITSExcludeRecordNoNull<M, T, K extends keyof M = keyof M> = {\n\t[P in K]: NonNullable<M[P]>;\n};\n\nexport type ITSExcludeKeyofRecord<M, T> = keyof ITSExcludeRecord<M, T>;\n\n/**\n * filter all member is function and key type is string or symbol\n */\nexport type ITSMemberMethods<T> = ITSExtractRecord<T, Function, Extract<keyof T, ITSPropertyKey>>;\n\nexport type ITSKeyofMemberMethods<T> = ITSExtractKeyof<ITSMemberMethods<T>, ITSPropertyKey>;\n\nexport type ITSExtractKeyof<T, U> = Extract<keyof T, U>;\n\nexport type ITSExtractArrayLike<A, K extends Extract<keyof A, number> = Extract<keyof A, number>> = {\n\t[Index in K]: A[Index];\n};\n\nexport type ITSKeyofArrayLike<A> = keyof ITSExtractArrayLike<A>;\n\nexport type ITSNullable<T> = T extends null | undefined ? T : never;\n\n/**\n * 找出 T 當中 與 U 相同的 key\n */\nexport type ITSKeyofSame<T, U> = Extract<keyof T, keyof U>;\n/**\n * 找出 T 當中 與 U 不同的 key\n */\nexport type ITSKeyofDiff<T, U> = Exclude<keyof T, ITSKeyofSame<T, U>>;\n\n/**\n * 找出 T 與 U 當中同時存在的 key\n */\nexport type ITSKeyofBothSame<T, U> = ITSKeyofSame<T, U> | ITSKeyofSame<U, T>;\n\n/**\n * 去除 T 與 U 當中同時存在的 key\n */\nexport type ITSKeyofBothDiff<T, U> = ITSKeyofDiff<T, U> | ITSKeyofDiff<U, T>;\n\n\n"]}