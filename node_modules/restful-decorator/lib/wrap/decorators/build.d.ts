/**
 * Created by user on 2019/6/7.
 */
import { IMemberMethods, IHandleDescriptor2, IHandleDescriptor3 } from '../../decorators/build';
import { AbstractHttpClient } from '../abstract';
import { AxiosRequestConfig } from 'axios';
import { IParamMetadata } from '../../decorators/body';
export interface IMethodBuilderCache {
    requestConfig: AxiosRequestConfig;
    bool: boolean;
    requestConfigNew: AxiosRequestConfig;
    paramMetadata: IParamMetadata;
    autoRequest?: boolean;
    requested?: boolean;
}
export interface IMethodBuilderOptions<T extends object, R> {
    handler?: IHandleDescriptor3<T, R & IMethodBuilderCache>;
    /**
     * @default true
     */
    autoRequest?: boolean;
    /**
     * 當 autoRequest 啟用時 會自動將回傳內容改為 response.data
     * @default true
     */
    returnData?: boolean;
}
/**
 * preset type for methodBuilder
 */
export declare function createMethodBuilder<T extends AbstractHttpClient, R = {}>(wrapFn?: IHandleDescriptor2<T, R & IMethodBuilderCache>): (handler?: IHandleDescriptor3<T, R & IMethodBuilderCache> | IMethodBuilderOptions<T, R>, builderOptions?: IMethodBuilderOptions<T, R> | boolean) => <P extends Extract<Extract<keyof T, import("ts-type").ITSPropertyKey>, import("ts-type").ITSPropertyKey>>(target: T, propertyName: P, descriptor: TypedPropertyDescriptor<IMemberMethods<T>[P]>) => void;
export default createMethodBuilder;
