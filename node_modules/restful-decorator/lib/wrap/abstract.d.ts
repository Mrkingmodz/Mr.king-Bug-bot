import 'reflect-metadata';
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { IUrlLike } from '../util/url';
import { IParamMetadata } from '../decorators/body';
import { IPropertyKey } from 'reflect-metadata-util';
import { LazyCookieJar } from 'lazy-cookies';
import { CookieJar } from 'tough-cookie';
export interface IAbstractHttpClientCache {
    requestConfig: AxiosRequestConfig;
    bool: boolean;
    requestConfigNew: AxiosRequestConfig;
    paramMetadata: IParamMetadata;
    router: string;
    pathData: Record<string, string>;
}
export declare const methodBuilder: (handler?: import("../decorators/build").IHandleDescriptor3<any, IAbstractHttpClientCache & import("./decorators/build").IMethodBuilderCache, string | symbol> | import("./decorators/build").IMethodBuilderOptions<any, IAbstractHttpClientCache>, builderOptions?: boolean | import("./decorators/build").IMethodBuilderOptions<any, IAbstractHttpClientCache>) => <P extends string | symbol>(target: any, propertyName: P, descriptor: TypedPropertyDescriptor<import("../decorators/build").IMemberMethods<any>[P]>) => void;
export declare class AbstractHttpClient {
    $parent: this;
    $http: AxiosInstance;
    $requestConfig: AxiosRequestConfig;
    $url: IUrlLike;
    $pathData: Record<string, string>;
    $returnValue: AxiosResponse<unknown> | AxiosResponse<unknown>["data"];
    $responseUrl: string;
    $sharedPreferences: Map<IPropertyKey, unknown>;
    $response: AxiosResponse<unknown>;
    constructor(defaults?: AxiosRequestConfig, ...argv: any);
    protected _init(defaults?: AxiosRequestConfig, ...argv: any): any;
    get $jar(): LazyCookieJar;
    get $baseURL(): string;
    _serialize(jar?: CookieJar): CookieJar.Serialized;
    _jar(): LazyCookieJar;
    _setCookieSync(...argv: Parameters<LazyCookieJar["setCookieSync"]>): void;
    /**
     * run this api before start calling site api
     * this will not auto call, need run by self
     */
    _beforeStart(): Promise<void>;
}
export declare function paramMetadataRequestConfig(_argv: {
    paramMetadata: IParamMetadata;
    requestConfig: AxiosRequestConfig;
    thisArgv: object;
}): {
    /**
     * url before expanded
     */
    url: string;
    /**
     * for router url
     */
    pathData: Record<string, string>;
    /**
     * merged request config
     */
    requestConfig: AxiosRequestConfig;
};
