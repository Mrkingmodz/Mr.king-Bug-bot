{"version":3,"file":"build.js","sourceRoot":"","sources":["build.ts"],"names":[],"mappings":";;;;AAMA,qEAAgC;AAChC,mCAAwC;AACxC,iCAA4C;AAM5C,SAAgB,aAAa,CAA2B,OAAqD;IAE5G,OAAO,UAA2C,MAAS,EAAE,YAAe,EAAE,UAAyD;QAEtI,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC;QAEnC,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YAE9B,OAAO,IAAI,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,aAAa;QACb,UAAU,CAAC,KAAK,GAAG,UAA6B,GAAG,OAAc;YAEhE,IAAI,EACH,QAAQ,GAAG,IAAI,EACf,IAAI,GAAG,OAAO,EACd,MAAM,GAAG,SAAS,EAClB,WAAW,GACX,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;gBACtB,MAAM;gBACN,YAAY;gBACZ,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,SAAS;gBACjB,IAAI,EAAE,OAAO;aACb,CAAC,CAAC;YAEH,IAAI,QAAQ,IAAI,IAAI,EACpB;gBACC,QAAQ,GAAG,IAAI,CAAC;aAChB;YAED,IAAI,CAAC,GAAkB,kBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE/C,IAAI,WAAW,IAAI,IAAI,EACvB;gBACC,IAAI,iBAAiB,GAAG,IAAA,yBAAkB,EAAC,MAAM,EAAE,YAAY,CAAC,CAAC;gBAEjE,IAAI,iBAAiB,IAAI,IAAI,EAC7B;oBACC,iBAAiB,GAAG,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC;iBACxC;gBAED,CAAC,GAAG,CAAC;oBACJ,aAAa;qBACZ,UAAU,CAAC,WAAW,CAAC;oBACxB,aAAa;qBACZ,IAAI,CAAC,iBAAiB,CAAC;oBACxB,aAAa;qBACZ,IAAI,CAAC,KAAK,WAAW,WAAW;oBAEhC,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAE/C,IAAI,GAAG,IAAI,IAAI,EACf;wBACC,OAAO,GAAG,CAAC;qBACX;oBAED,OAAO,WAAW,CAAC;gBACpB,CAAC,CAAC,CACF;aACD;iBAED;gBACC,CAAC,GAAG,CAAC;qBACH,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CACzC;aACD;YAED,MAAM,OAAO,GAAG,IAAA,qBAAa,EAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAEpD,IAAI,OAAO,EACX;gBACC,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;aACvB;YAED,OAAO,CAAC,CAAC;QACV,CAAC,CAAC;IACH,CAAC,CAAC;AACH,CAAC;AA/ED,sCA+EC;AAwBD,kBAAe,aAAa,CAAC","sourcesContent":["/**\n * Created by user on 2019/6/7.\n */\nimport subobject from '../helper/subobject';\nimport { ITSRequireAtLeastOne, ITSMemberMethods, ITSKeyofMemberMethods } from 'ts-type';\nimport { IPropertyKey } from 'reflect-metadata-util';\nimport Bluebird from 'bluebird';\nimport { getCatchError } from './catch';\nimport { getHookReturnValue } from './hook';\n\nexport type IMemberMethods<T> = ITSMemberMethods<T>;\n\nexport type IMemberMethodsKeys<T> = ITSKeyofMemberMethods<T>;\n\nexport function methodBuilder<T extends object, R = {}>(handler?: IHandleDescriptor<T, IMemberMethodsKeys<T>>)\n{\n\treturn function <P extends IMemberMethodsKeys<T>>(target: T, propertyName: P, descriptor: TypedPropertyDescriptor<IMemberMethods<T>[P]>)\n\t{\n\t\tconst oldMethod = descriptor.value;\n\n\t\thandler = handler || ((data) =>\n\t\t{\n\t\t\treturn data;\n\t\t});\n\n\t\t// @ts-ignore\n\t\tdescriptor.value = function (this: ThisType<T>, ...oldArgv: any[])\n\t\t{\n\t\t\tlet {\n\t\t\t\tthisArgv = this,\n\t\t\t\targv = oldArgv,\n\t\t\t\tmethod = oldMethod,\n\t\t\t\treturnValue,\n\t\t\t} = handler.call(this, {\n\t\t\t\ttarget,\n\t\t\t\tpropertyName,\n\t\t\t\tthisArgv: this,\n\t\t\t\tmethod: oldMethod,\n\t\t\t\targv: oldArgv,\n\t\t\t});\n\n\t\t\tif (thisArgv == null)\n\t\t\t{\n\t\t\t\tthisArgv = this;\n\t\t\t}\n\n\t\t\tlet p: Bluebird<any> = Bluebird.bind(thisArgv);\n\n\t\t\tif (returnValue != null)\n\t\t\t{\n\t\t\t\tlet fnHookReturnValue = getHookReturnValue(target, propertyName);\n\n\t\t\t\tif (fnHookReturnValue == null)\n\t\t\t\t{\n\t\t\t\t\tfnHookReturnValue = (data: any) => data;\n\t\t\t\t}\n\n\t\t\t\tp = p\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t.thenReturn(returnValue)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t.then(fnHookReturnValue)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t.then(async function (returnValue){\n\n\t\t\t\t\t\tconst ret = await method.apply(thisArgv, argv);\n\n\t\t\t\t\t\tif (ret != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn returnValue;\n\t\t\t\t\t})\n\t\t\t\t;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tp = p\n\t\t\t\t\t.thenReturn(method.apply(thisArgv, argv))\n\t\t\t\t;\n\t\t\t}\n\n\t\t\tconst fnCatch = getCatchError(target, propertyName);\n\n\t\t\tif (fnCatch)\n\t\t\t{\n\t\t\t\treturn p.catch(fnCatch)\n\t\t\t}\n\n\t\t\treturn p;\n\t\t};\n\t};\n}\n\nexport type ConstructorLikeType<T extends object = object> = new(...args: any) => T;\n\nexport type IHandleDescriptor<T extends object, P extends IMemberMethodsKeys<T> = IMemberMethodsKeys<T>> = (this: ThisType<T>, data: IHandleDescriptorParameters<T, P>) => IHandleDescriptorReturn<T, P>;\n\nexport type IHandleDescriptor2<T extends object, R = {}, P extends IMemberMethodsKeys<T> = IMemberMethodsKeys<T>> = (this: ThisType<T>, data: IHandleDescriptorParameters<T, P> & R) => IHandleDescriptorReturn2<T, R>;\n\nexport type IHandleDescriptor3<T extends object, R = {}, P extends IMemberMethodsKeys<T> = IMemberMethodsKeys<T>> = (this: ThisType<T>, data: IHandleDescriptorParameters<T, P> & R) => IHandleDescriptorReturn<T, P>;\n\nexport interface IHandleDescriptorParameters<T extends object, P extends IMemberMethodsKeys<T>>\n{\n\ttarget: T;\n\tpropertyName: P;\n\tthisArgv: Partial<T>;\n\tmethod: IMemberMethods<T>[P];\n\targv: any[];\n\treturnValue?: PromiseLike<any>\n}\n\nexport type IHandleDescriptorReturn<T extends object, P extends IMemberMethodsKeys<T>> = ITSRequireAtLeastOne<Partial<IHandleDescriptorParameters<T, P>>, 'thisArgv' | 'method' | 'argv' | 'returnValue'>;\n\nexport type IHandleDescriptorReturn2<T extends object, R> = ITSRequireAtLeastOne<IHandleDescriptorParameters<T, IMemberMethodsKeys<T>>, 'thisArgv' | 'method' | 'argv' | 'returnValue'> & R;\n\nexport default methodBuilder;\n"]}