import { ITSRequireAtLeastOne, ITSMemberMethods, ITSKeyofMemberMethods } from 'ts-type';
export declare type IMemberMethods<T> = ITSMemberMethods<T>;
export declare type IMemberMethodsKeys<T> = ITSKeyofMemberMethods<T>;
export declare function methodBuilder<T extends object, R = {}>(handler?: IHandleDescriptor<T, IMemberMethodsKeys<T>>): <P extends Extract<Extract<keyof T, import("ts-type").ITSPropertyKey>, import("ts-type").ITSPropertyKey>>(target: T, propertyName: P, descriptor: TypedPropertyDescriptor<IMemberMethods<T>[P]>) => void;
export declare type ConstructorLikeType<T extends object = object> = new (...args: any) => T;
export declare type IHandleDescriptor<T extends object, P extends IMemberMethodsKeys<T> = IMemberMethodsKeys<T>> = (this: ThisType<T>, data: IHandleDescriptorParameters<T, P>) => IHandleDescriptorReturn<T, P>;
export declare type IHandleDescriptor2<T extends object, R = {}, P extends IMemberMethodsKeys<T> = IMemberMethodsKeys<T>> = (this: ThisType<T>, data: IHandleDescriptorParameters<T, P> & R) => IHandleDescriptorReturn2<T, R>;
export declare type IHandleDescriptor3<T extends object, R = {}, P extends IMemberMethodsKeys<T> = IMemberMethodsKeys<T>> = (this: ThisType<T>, data: IHandleDescriptorParameters<T, P> & R) => IHandleDescriptorReturn<T, P>;
export interface IHandleDescriptorParameters<T extends object, P extends IMemberMethodsKeys<T>> {
    target: T;
    propertyName: P;
    thisArgv: Partial<T>;
    method: IMemberMethods<T>[P];
    argv: any[];
    returnValue?: PromiseLike<any>;
}
export declare type IHandleDescriptorReturn<T extends object, P extends IMemberMethodsKeys<T>> = ITSRequireAtLeastOne<Partial<IHandleDescriptorParameters<T, P>>, 'thisArgv' | 'method' | 'argv' | 'returnValue'>;
export declare type IHandleDescriptorReturn2<T extends object, R> = ITSRequireAtLeastOne<IHandleDescriptorParameters<T, IMemberMethodsKeys<T>>, 'thisArgv' | 'method' | 'argv' | 'returnValue'> & R;
export default methodBuilder;
