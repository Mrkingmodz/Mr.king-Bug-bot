{"version":3,"file":"trim.js","sourceRoot":"","sources":["trim.ts"],"names":[],"mappings":";;;AAAA,sCAAkD;AAClD,+BAA4B;AAGrB,MAAM,IAAI,GAAG,CAAO,IAAoB,EAAE,EAAE;IAElD,IAAI,IAAI,CAAC,eAAM,CAAC,GAAG,IAAI,CAAC,YAAG,CAAC,EAC5B;QACC,KAAK,IAAI,MAAM,GAAG,IAAI,CAAC,iBAAQ,CAAC,CAAC,IAAI,EACpC,IAAI,CAAC,eAAM,CAAC,GAAG,IAAI,CAAC,YAAG,CAAC,IAAI,MAAM,KAAK,IAAI,GAE5C;YACC,wDAAwD;YACxD,yDAAyD;YACzD,2BAA2B;YAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;YACxB,IAAA,SAAG,EAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YACjB,MAAM,GAAG,IAAI,CAAA;SACb;KACD;AACF,CAAC,CAAA;AAhBY,QAAA,IAAI,QAgBhB","sourcesContent":["import { LENGTH, MAX, LRU_LIST } from '../symbol';\nimport { del } from './del';\nimport { LRUCache } from '../LRUCache';\n\nexport const trim = <K, V>(self: LRUCache<K, V>) =>\n{\n\tif (self[LENGTH] > self[MAX])\n\t{\n\t\tfor (let walker = self[LRU_LIST].tail;\n\t\t\tself[LENGTH] > self[MAX] && walker !== null;\n\t\t)\n\t\t{\n\t\t\t// We know that we're about to delete this one, and also\n\t\t\t// what the next least recently used key will be, so just\n\t\t\t// go ahead and set it now.\n\t\t\tconst prev = walker.prev\n\t\t\tdel(self, walker)\n\t\t\twalker = prev\n\t\t}\n\t}\n}\n"]}