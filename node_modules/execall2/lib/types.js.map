{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":";;;AAIa,QAAA,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC","sourcesContent":["import { ICloneRegexp, ICloneRegexpOptionsCustom } from '@regexp-cjk/clone-regexp/lib/types';\n\nexport type { ICloneRegexp }\n\nexport const SYMBOL = Symbol.for('execall');\n\nexport interface IExecAllOptions<T extends RegExp = RegExp> extends ICloneRegexpOptionsCustom<T>\n{\n\n\t/**\n\t * allow change cloneRegexp function\n\t */\n\tcloneRegexp?: ICloneRegexp<T>,\n\n\t/**\n\t * only use this when u know what u doing\n\t */\n\tleftContext?: boolean,\n\trightContext?: boolean,\n\n\tremoveHiddenData?: boolean,\n}\n\nexport interface IExecAllRegExpExecArray<T extends RegExp = RegExp> extends RegExpExecArray\n{\n\n\t/**\n\t * The 0-based index of the match in the string.\n\t */\n\tindex: number,\n\t//input: string,\n\n\t/**\n\t * es2018\n\t */\n\tgroups?: {\n\t\t[k: string]: string,\n\t},\n\n\t[SYMBOL]: IMatches<T>\n}\n\nexport interface IMatchesRow<T extends RegExp = RegExp> extends IExecAllRegExpExecArray<T>\n{\n\tmatch: string,\n\tsub: string[],\n\n\tleftContext?: string,\n\trightContext?: string,\n}\n\nexport type IMatches<T extends RegExp = RegExp> = IMatchesRow<T>[] & {\n\t/**\n\t * regular expressions\n\t *\n\t * @readonly\n\t */\n\treadonly re: T,\n\t/**\n\t * regular expressions that contains the string against which a regular expression is matched.\n\t *\n\t * @readonly\n\t */\n\treadonly input: string,\n\t/**\n\t * last matched index\n\t *\n\t * @readonly\n\t */\n\treadonly lastIndex: number,\n};\n"]}