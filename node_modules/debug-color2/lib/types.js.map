{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":";AAAA;;GAEG","sourcesContent":["/**\n * Created by user on 2020/6/11.\n */\n\nimport { Chalk, Level, ChalkOptions, Chalk as IChalk, Level as ILevel, ChalkOptions as IChalkOptions } from 'chalk';\nimport { DateTime } from 'luxon';\nimport { InspectOptions } from \"util\";\n\nexport type { InspectOptions } from 'util';\n\nexport type { Chalk, Level, ChalkOptions }\nexport type { IChalk, ILevel, IChalkOptions }\n\nimport IWriteStream = NodeJS.WriteStream;\nimport { methods } from './fill-property';\nimport { ICrossConsole, IMethods } from './types/CrossConsole';\n\nexport type { IWriteStream }\n\nexport type IOptionsColorsProp =\n\t'debug'\n\t| 'error'\n\t| 'info'\n\t| 'log'\n\t| 'trace'\n\t| 'warn'\n\t| 'success'\n\t| 'ok'\n\t| 'exception'\n\t| 'fail';\n\nexport type IStylesFnNames =\n\t'rgb'\n\t| 'hsl'\n\t| 'hsv'\n\t| 'hwb'\n\t| 'bgHex'\n\t| 'bgKeyword'\n\t| 'bgRgb'\n\t| 'bgHsl'\n\t| 'bgHsv'\n\t| 'bgHwb'\n\t| 'hex'\n\t| 'keyword'\n\t;\n\nexport type IStylesColorNames = Exclude<keyof IStyles, IStylesFnNames>;\n\nexport interface IStyles\n{\n\trgb(r: number, g: number, b: number): this;\n\n\thsl(h: number, s: number, l: number): this;\n\n\thsv(h: number, s: number, v: number): this;\n\n\thwb(h: number, w: number, b: number): this;\n\n\tbgHex(color: string): this;\n\n\tbgKeyword(color: string): this;\n\n\tbgRgb(r: number, g: number, b: number): this;\n\n\tbgHsl(h: number, s: number, l: number): this;\n\n\tbgHsv(h: number, s: number, v: number): this;\n\n\tbgHwb(h: number, w: number, b: number): this;\n\n\thex(color: string): this;\n\n\tkeyword(color: string): this;\n\n\treadonly reset: this;\n\treadonly bold: this;\n\treadonly dim: this;\n\treadonly italic: this;\n\treadonly underline: this;\n\treadonly inverse: this;\n\treadonly hidden: this;\n\treadonly strikethrough: this;\n\n\treadonly visible: this;\n\n\treadonly black: this;\n\treadonly red: this;\n\treadonly green: this;\n\treadonly yellow: this;\n\treadonly blue: this;\n\treadonly magenta: this;\n\treadonly cyan: this;\n\treadonly white: this;\n\treadonly gray: this;\n\treadonly grey: this;\n\treadonly blackBright: this;\n\treadonly redBright: this;\n\treadonly greenBright: this;\n\treadonly yellowBright: this;\n\treadonly blueBright: this;\n\treadonly magentaBright: this;\n\treadonly cyanBright: this;\n\treadonly whiteBright: this;\n\n\treadonly bgBlack: this;\n\treadonly bgRed: this;\n\treadonly bgGreen: this;\n\treadonly bgYellow: this;\n\treadonly bgBlue: this;\n\treadonly bgMagenta: this;\n\treadonly bgCyan: this;\n\treadonly bgWhite: this;\n\treadonly bgBlackBright: this;\n\treadonly bgRedBright: this;\n\treadonly bgGreenBright: this;\n\treadonly bgYellowBright: this;\n\treadonly bgBlueBright: this;\n\treadonly bgMagentaBright: this;\n\treadonly bgCyanBright: this;\n\treadonly bgWhiteBright: this;\n}\n\nexport interface IOptions\n{\n\t/**\n\t * enable log display or not\n\t */\n\tenabled?: boolean,\n\n\t/**\n\t * show label string\n\t */\n\tlabel?: boolean | string[],\n\n\t/**\n\t * show time label\n\t */\n\ttime?: boolean,\n\n\t/**\n\t * allow change timeFormat\n\t *\n\t * @default '[HH:mm:ss.SSS]'\n\t */\n\ttimeFormat?: string;\n\n\ttimeFormatFn?<T extends unknown[]>(data: Parameters<IOptions[\"labelFormatFn\"]>[0] & {\n\t\tfailBackTimeFormat: string\n\t\tdate: DateTime,\n\t}): string;\n\n\t/**\n\t * allow change labelFormat\n\t *\n\t * @default `[${data.name.toString().toUpperCase()}]`\n\t */\n\tlabelFormatFn?<T extends unknown[]>(data: {\n\t\tname: string,\n\t\targv?: T,\n\t\tfailBack: string,\n\t}): string;\n\n\t/**\n\t * set default inspectOptions\n\t */\n\tinspectOptions?: InspectOptions,\n\n\tchalkOptions?: ChalkOptions,\n\n\t/**\n\t * set color style\n\t */\n\tcolors?: Record<IOptionsColorsProp | string, Chalk | IChalkLike | IStylesColorNames>,\n\n\t/**\n\t * check is node.js console\n\t */\n\treadonly stream?: boolean,\n}\n\nexport interface IChalkLike\n{\n\t(string): string,\n\n\t(string, ...argv): string,\n\n\t(...argv): string,\n}\n\nexport type IConsoleWithStream<T extends object = Console> = T & {\n\t_stdout?: IWriteStream;\n\t_stderr?: IWriteStream;\n}\n\nexport type IStylesNameWithoutFn = Exclude<keyof IStyles, IStylesFnNames>\n\nexport type IStylesNamesWithoutFn = IStylesNameWithoutFn[]\n\nexport type IFillProperty<T, P extends string, U> = Record<Exclude<IMethods, keyof T>, U>\n\nexport type IValueOfArray<T extends any[]> = T extends (infer U)[] ? U : never;\n\nexport type IFillPropertyAuto<T extends Console> = Pick<ICrossConsole, Exclude<IMethods, keyof T>>\n"]}